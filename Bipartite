class graphNode():
    def __init__(self, label):
        self.label = label
        self.neighbors = []
        
class Solution:
    def isBipartite(self, node):
        if node is None:
            return True
        dict = {node : 1}
        queue = [node]
        while queue:
            cur = queue.pop(0)
            curset = dict[cur]
            for neighbor in cur.neighbors:
                if neighbor not in dict:
                    queue.append(neighbor)
                    dict[neighbor] = -curset
                if curset == dict[neighbor]:
                    return False
        return True
    
node1 = graphNode(1)
node2 = graphNode(2)
node3 = graphNode(3)
node4 = graphNode(4)
node5 = graphNode(5)
node6 = graphNode(6)
node1.neighbors = [node2, node4]
node2.neighbors = [node1, node3]
node3.neighbors = [node2, node5]
node4.neighbors = [node1, node6]
node5.neighbors = [node3, node6]
node6.neighbors = [node4, node5]

sol = Solution()
print sol.isBipartite(node1)
print sol.isBipartite(None)
